version: '3.8'
services:
  backend:
    build: ../backend
    container_name: bn_backend
    env_file:
      - ../.env
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - ../backend:/app
    restart: unless-stopped

  frontend:
    build: ../frontend
    container_name: bn_frontend
    env_file:
      - ../.env
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ../frontend:/app
    restart: unless-stopped

  postgres:
    image: postgres:15.6
    container_name: bn_postgres
    environment:
      POSTGRES_DB: bnkite
      POSTGRES_USER: bnkite
      POSTGRES_PASSWORD: bnkite
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bnkite"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: unless-stopped

  redis:
    image: redis:7.2.4
    container_name: bn_redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - redisdata:/data
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.51.2
    container_name: bn_prometheus
    volumes:
      - ../docker/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.4.4
    container_name: bn_grafana
    ports:
      - "3001:3000"
    volumes:
      - ../docker/grafana/dashboard.json:/etc/grafana/provisioning/dashboards/dashboard.json
    restart: unless-stopped

volumes:
  pgdata:
  redisdata:
